// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: relay/v1/relay.proto

package relayv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderDirection int32

const (
	OrderDirection_ORDER_DIRECTION_UNSPECIFIED OrderDirection = 0
	OrderDirection_ORDER_DIRECTION_ASC         OrderDirection = 1
	OrderDirection_ORDER_DIRECTION_DESC        OrderDirection = 2
)

// Enum value maps for OrderDirection.
var (
	OrderDirection_name = map[int32]string{
		0: "ORDER_DIRECTION_UNSPECIFIED",
		1: "ORDER_DIRECTION_ASC",
		2: "ORDER_DIRECTION_DESC",
	}
	OrderDirection_value = map[string]int32{
		"ORDER_DIRECTION_UNSPECIFIED": 0,
		"ORDER_DIRECTION_ASC":         1,
		"ORDER_DIRECTION_DESC":        2,
	}
)

func (x OrderDirection) Enum() *OrderDirection {
	p := new(OrderDirection)
	*p = x
	return p
}

func (x OrderDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_relay_v1_relay_proto_enumTypes[0].Descriptor()
}

func (OrderDirection) Type() protoreflect.EnumType {
	return &file_relay_v1_relay_proto_enumTypes[0]
}

func (x OrderDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderDirection.Descriptor instead.
func (OrderDirection) EnumDescriptor() ([]byte, []int) {
	return file_relay_v1_relay_proto_rawDescGZIP(), []int{0}
}

// Pagination specifies cursor-based pagination parameters.
// Uses Relay-style cursor pagination for efficient and scalable data traversal.
// This message is reusable across all entity types.
//
// Forward pagination example (fetch first 10 items):
//
//	{
//	  "first": 10
//	}
//
// Forward pagination with cursor (fetch next 10 items):
//
//	{
//	  "after": "eyJpZCI6MjB9",
//	  "first": 10
//	}
//
// Backward pagination example (fetch last 10 items):
//
//	{
//	  "last": 10
//	}
//
// Backward pagination with cursor (fetch previous 10 items):
//
//	{
//	  "before": "eyJpZCI6MTB9",
//	  "last": 10
//	}
type Pagination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cursor pointing to the item after which to start fetching.
	// Use with 'first' for forward pagination.
	// Example: "eyJpZCI6MjB9" (base64-encoded cursor)
	After *string `protobuf:"bytes,1,opt,name=after,proto3,oneof" json:"after,omitempty"`
	// Number of items to fetch in forward direction (after the 'after' cursor).
	// Must be positive. Typically combined with 'after' or used alone for initial page.
	// Example: 20 (fetch 20 items)
	First *int64 `protobuf:"varint,2,opt,name=first,proto3,oneof" json:"first,omitempty"`
	// Cursor pointing to the item before which to start fetching.
	// Use with 'last' for backward pagination.
	// Example: "eyJpZCI6MTB9" (base64-encoded cursor)
	Before *string `protobuf:"bytes,3,opt,name=before,proto3,oneof" json:"before,omitempty"`
	// Number of items to fetch in backward direction (before the 'before' cursor).
	// Must be positive. Typically combined with 'before'.
	// Example: 20 (fetch previous 20 items)
	Last          *int64 `protobuf:"varint,4,opt,name=last,proto3,oneof" json:"last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_relay_v1_relay_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_relay_v1_relay_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_relay_v1_relay_proto_rawDescGZIP(), []int{0}
}

func (x *Pagination) GetAfter() string {
	if x != nil && x.After != nil {
		return *x.After
	}
	return ""
}

func (x *Pagination) GetFirst() int64 {
	if x != nil && x.First != nil {
		return *x.First
	}
	return 0
}

func (x *Pagination) GetBefore() string {
	if x != nil && x.Before != nil {
		return *x.Before
	}
	return ""
}

func (x *Pagination) GetLast() int64 {
	if x != nil && x.Last != nil {
		return *x.Last
	}
	return 0
}

// PageInfo contains pagination metadata for cursor-based pagination responses.
// It indicates whether more data is available and provides cursors for navigation.
//
// Example response:
//
//	{
//	  "items": [...],
//	  "page_info": {
//	    "has_next_page": true,
//	    "has_prev_page": false,
//	    "start_cursor": "eyJpZCI6MTB9",
//	    "end_cursor": "eyJpZCI6MjB9"
//	  }
//	}
type PageInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates if there are more items available after the current page.
	// Use end_cursor with 'after' to fetch the next page.
	HasNextPage bool `protobuf:"varint,1,opt,name=has_next_page,json=hasNextPage,proto3" json:"has_next_page,omitempty"`
	// Indicates if there are more items available before the current page.
	// Use start_cursor with 'before' to fetch the previous page.
	HasPrevPage bool `protobuf:"varint,2,opt,name=has_prev_page,json=hasPrevPage,proto3" json:"has_prev_page,omitempty"`
	// Opaque cursor pointing to the first item in the current page.
	// Use this with 'before' parameter to paginate backwards.
	StartCursor *string `protobuf:"bytes,3,opt,name=start_cursor,json=startCursor,proto3,oneof" json:"start_cursor,omitempty"`
	// Opaque cursor pointing to the last item in the current page.
	// Use this with 'after' parameter to paginate forwards.
	EndCursor     *string `protobuf:"bytes,4,opt,name=end_cursor,json=endCursor,proto3,oneof" json:"end_cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	mi := &file_relay_v1_relay_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_relay_v1_relay_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_relay_v1_relay_proto_rawDescGZIP(), []int{1}
}

func (x *PageInfo) GetHasNextPage() bool {
	if x != nil {
		return x.HasNextPage
	}
	return false
}

func (x *PageInfo) GetHasPrevPage() bool {
	if x != nil {
		return x.HasPrevPage
	}
	return false
}

func (x *PageInfo) GetStartCursor() string {
	if x != nil && x.StartCursor != nil {
		return *x.StartCursor
	}
	return ""
}

func (x *PageInfo) GetEndCursor() string {
	if x != nil && x.EndCursor != nil {
		return *x.EndCursor
	}
	return ""
}

var File_relay_v1_relay_proto protoreflect.FileDescriptor

const file_relay_v1_relay_proto_rawDesc = "" +
	"\n" +
	"\x14relay/v1/relay.proto\x12\brelay.v1\"\xa0\x01\n" +
	"\n" +
	"Pagination\x12\x19\n" +
	"\x05after\x18\x01 \x01(\tH\x00R\x05after\x88\x01\x01\x12\x19\n" +
	"\x05first\x18\x02 \x01(\x03H\x01R\x05first\x88\x01\x01\x12\x1b\n" +
	"\x06before\x18\x03 \x01(\tH\x02R\x06before\x88\x01\x01\x12\x17\n" +
	"\x04last\x18\x04 \x01(\x03H\x03R\x04last\x88\x01\x01B\b\n" +
	"\x06_afterB\b\n" +
	"\x06_firstB\t\n" +
	"\a_beforeB\a\n" +
	"\x05_last\"\xbe\x01\n" +
	"\bPageInfo\x12\"\n" +
	"\rhas_next_page\x18\x01 \x01(\bR\vhasNextPage\x12\"\n" +
	"\rhas_prev_page\x18\x02 \x01(\bR\vhasPrevPage\x12&\n" +
	"\fstart_cursor\x18\x03 \x01(\tH\x00R\vstartCursor\x88\x01\x01\x12\"\n" +
	"\n" +
	"end_cursor\x18\x04 \x01(\tH\x01R\tendCursor\x88\x01\x01B\x0f\n" +
	"\r_start_cursorB\r\n" +
	"\v_end_cursor*d\n" +
	"\x0eOrderDirection\x12\x1f\n" +
	"\x1bORDER_DIRECTION_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13ORDER_DIRECTION_ASC\x10\x01\x12\x18\n" +
	"\x14ORDER_DIRECTION_DESC\x10\x02B\x8b\x01\n" +
	"\fcom.relay.v1B\n" +
	"RelayProtoP\x01Z.github.com/theplant/relay/gen/relay/v1;relayv1\xa2\x02\x03RXX\xaa\x02\bRelay.V1\xca\x02\bRelay\\V1\xe2\x02\x14Relay\\V1\\GPBMetadata\xea\x02\tRelay::V1b\x06proto3"

var (
	file_relay_v1_relay_proto_rawDescOnce sync.Once
	file_relay_v1_relay_proto_rawDescData []byte
)

func file_relay_v1_relay_proto_rawDescGZIP() []byte {
	file_relay_v1_relay_proto_rawDescOnce.Do(func() {
		file_relay_v1_relay_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_relay_v1_relay_proto_rawDesc), len(file_relay_v1_relay_proto_rawDesc)))
	})
	return file_relay_v1_relay_proto_rawDescData
}

var file_relay_v1_relay_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_relay_v1_relay_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_relay_v1_relay_proto_goTypes = []any{
	(OrderDirection)(0), // 0: relay.v1.OrderDirection
	(*Pagination)(nil),  // 1: relay.v1.Pagination
	(*PageInfo)(nil),    // 2: relay.v1.PageInfo
}
var file_relay_v1_relay_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_relay_v1_relay_proto_init() }
func file_relay_v1_relay_proto_init() {
	if File_relay_v1_relay_proto != nil {
		return
	}
	file_relay_v1_relay_proto_msgTypes[0].OneofWrappers = []any{}
	file_relay_v1_relay_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_relay_v1_relay_proto_rawDesc), len(file_relay_v1_relay_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_relay_v1_relay_proto_goTypes,
		DependencyIndexes: file_relay_v1_relay_proto_depIdxs,
		EnumInfos:         file_relay_v1_relay_proto_enumTypes,
		MessageInfos:      file_relay_v1_relay_proto_msgTypes,
	}.Build()
	File_relay_v1_relay_proto = out.File
	file_relay_v1_relay_proto_goTypes = nil
	file_relay_v1_relay_proto_depIdxs = nil
}
